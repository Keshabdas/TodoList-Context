{"version":3,"sources":["context/AppReducer.js","context/Provider.js","components/TodoForm.js","components/TodoActions.js","components/TodoItem.js","components/CompletedList.js","components/IncompleteList.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","todos","payload","filter","todo","id","initialState","JSON","parse","window","localStorage","getItem","GlobalContext","createContext","Provider","children","useReducer","appReducer","dispatch","completedList","isComplete","inCompleteList","useEffect","Todos","setItem","stringify","UpdateLS","value","addTodo","trimmedText","trim","newTask","Math","floor","random","taskText","isEdit","length","deleteTodo","onCheckHandler","currentTodos","selectedIndex","findIndex","editHandler","editDone","defaultValue","TodoForm","useState","setvalue","useContext","Paper","elevation","style","marginTop","onSubmit","event","preventDefault","TextField","variant","placeholder","onChange","e","target","fullWidth","autoFocus","InputProps","endAdornment","IconButton","color","onClick","TodoActions","inputValue","React","anchorEl","setAnchorEl","handleClose","aria-label","Tooltip","title","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","size","styles","makeStyles","container","marginBottom","boxShadow","cursor","complete","textDecoration","incomplete","TodoItem","classes","setInputValue","className","ListItem","onDoubleClick","changeHandler","multiline","ListItemText","primary","ListItemSecondaryAction","CompletedList","undefined","Typography","align","List","map","index","key","IncompletedList","myStyle","root","fontWeight","margin","Header","text","AppBar","App","Container","maxWidth","Grid","spacing","item","md","xs","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.adb07ad9.chunk.js","sourcesContent":["export default (state, action) => {\r\n    switch(action.type){\r\n        case \"ADD_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos, action.payload],\r\n            }\r\n        case \"REMOVE_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: state.todos.filter(todo => todo.id !== action.payload)\r\n            }\r\n        case \"CHECK_HANDLER\":\r\n            return {\r\n                ...state,\r\n                todos: action.payload\r\n            }\r\n        case \"EDIT_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: action.payload\r\n            }\r\n        case \"TEXT_EDIT_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: action.payload\r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n","import React, {createContext, useReducer, useEffect} from 'react'\r\nimport appReducer from \"./AppReducer\"\r\nconst initialState = {\r\n    todos: JSON.parse(window.localStorage.getItem(\"todos\")) || [],\r\n}\r\n\r\nexport const GlobalContext = createContext(initialState);  // Context is defined here\r\n\r\nfunction Provider({children}) {\r\n    const [state, dispatch] = useReducer(appReducer, initialState);\r\n    \r\n    const completedList = state.todos.filter(todo => todo.isComplete === true);\r\n    const inCompleteList = state.todos.filter(todo => todo.isComplete === false);\r\n\r\n    const addTodo = (value) => {\r\n        let trimmedText = value.trim();\r\n        let newTask = {\r\n            id: Math.floor(Math.random() * 100000000),\r\n            taskText: trimmedText,\r\n            isComplete: false,\r\n            isEdit: false,\r\n        }\r\n        if(trimmedText.length > 0){\r\n            dispatch({\r\n                type: \"ADD_TODO\",\r\n                payload: newTask\r\n            })\r\n        }\r\n    }\r\n\r\n    const deleteTodo = (value) => {\r\n        dispatch({\r\n            type: \"REMOVE_TODO\",\r\n            payload: value\r\n        })\r\n    }   \r\n\r\n    const onCheckHandler = (id) => {\r\n        let currentTodos = [...state.todos];\r\n        let selectedIndex = currentTodos.findIndex(todo => todo.id === id);\r\n        currentTodos[selectedIndex].isComplete = !currentTodos[selectedIndex].isComplete;\r\n        currentTodos[selectedIndex].isEdit = false;\r\n        dispatch({\r\n            type: \"CHECK_HANDLER\",\r\n            payload: currentTodos\r\n        })\r\n    }\r\n\r\n    const editHandler = (id) => {\r\n        let currentTodos = [...state.todos];\r\n        let selectedIndex = currentTodos.findIndex(todo => todo.id === id);\r\n        currentTodos[selectedIndex].isEdit = !currentTodos[selectedIndex].isEdit;\r\n        dispatch({\r\n            type: \"EDIT_TODO\",\r\n            payload: currentTodos\r\n        })\r\n    }\r\n\r\n    const editDone = (id, value, defaultValue) => {\r\n        let currentTodos = [...state.todos];\r\n        let selectedIndex = currentTodos.findIndex(todo => todo.id == id);\r\n        currentTodos[selectedIndex].isEdit = !currentTodos[selectedIndex].isEdit;\r\n        if(value === ''){\r\n            currentTodos[selectedIndex].taskText = defaultValue;\r\n        } else {\r\n            currentTodos[selectedIndex].taskText = value;\r\n        }\r\n        dispatch({\r\n            type: \"TEXT_EDIT_TODO\",\r\n            payload: currentTodos\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const UpdateLS = (todos) => {\r\n            let Todos = [...todos];\r\n            window.localStorage.setItem(\"todos\", JSON.stringify(Todos));\r\n        }\r\n        UpdateLS(state.todos);\r\n    }, [state])\r\n\r\n\r\n    return (\r\n        <GlobalContext.Provider \r\n            value={{\r\n                todos: state.todos,\r\n                completedList,\r\n                inCompleteList,\r\n                addTodo,\r\n                deleteTodo,\r\n                onCheckHandler,\r\n                editHandler,\r\n                editDone\r\n            }}>\r\n                {children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Provider;\r\n","import React, { useState, useContext } from 'react'\r\nimport { TextField, Paper, IconButton } from '@material-ui/core'\r\nimport {GlobalContext} from \"../context/Provider\"\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nfunction TodoForm() {\r\n    const [value, setvalue] = useState('');\r\n    const {addTodo}  = useContext(GlobalContext);\r\n\r\n    const ClearInput = () => (\r\n        <IconButton>\r\n            <ClearIcon color=\"primary\" onClick={() => setvalue('')} />\r\n        </IconButton>\r\n    );\r\n\r\n    return (\r\n        <Paper elevation={10} style={{marginTop: \"98px\"}}>\r\n            <form\r\n                onSubmit={event => {\r\n                    event.preventDefault();\r\n                    addTodo(value);\r\n                    setvalue('')\r\n                }}\r\n            >\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    placeholder=\"type here to add and hit enter.....\"  \r\n                    value={value} \r\n                    onChange={(e)=> setvalue(e.target.value)} \r\n                    fullWidth \r\n                    autoFocus={true}\r\n                    InputProps={{\r\n                        endAdornment: <ClearInput />\r\n                    }}\r\n                />\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useContext } from 'react';\r\nimport { IconButton, Menu, MenuItem, Tooltip } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditSharpIcon from '@material-ui/icons/EditSharp';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {GlobalContext} from \"../context/Provider\";\r\n\r\nconst TodoActions = ({todo, inputValue}) => {\r\n    const {deleteTodo, editHandler, editDone} = useContext(GlobalContext); \r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* {\r\n                todo.isComplete ? \r\n                <>\r\n                    <IconButton aria-label='delete' onClick={() => deleteTodo(todo.id)} color=\"secondary\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </> \r\n                :\r\n                <>\r\n                    {\r\n                        todo.isEdit ? \r\n                        <IconButton aria-label='delete' onClick={() => editDone(todo.id, inputValue, todo.taskText)} color=\"primary\">\r\n                            <DoneIcon />\r\n                        </IconButton>\r\n                        :\r\n                        <>\r\n                            <IconButton aria-label='delete' onClick={() => editHandler(todo.id)} color=\"primary\">\r\n                                <EditSharpIcon />\r\n                            </IconButton>\r\n                            <IconButton aria-label='delete' onClick={() => deleteTodo(todo.id)} color=\"secondary\">\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </>\r\n                    }\r\n                   \r\n                </> \r\n            } */}\r\n            {\r\n                todo.isEdit ? \r\n                <IconButton aria-label='delete' onClick={() => editDone(todo.id, inputValue, todo.taskText)} color=\"primary\">\r\n                    <DoneIcon />\r\n                </IconButton> \r\n                :\r\n                <Tooltip title=\"options\">\r\n                    <IconButton\r\n                        aria-label=\"more\"\r\n                        aria-controls=\"long-menu\"\r\n                        aria-haspopup=\"true\"\r\n                        onClick={handleClick}\r\n                    >\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            }\r\n            <Menu\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                {\r\n                    todo.isComplete ? \r\n                    <MenuItem onClick={handleClose}>\r\n                        <IconButton aria-label='delete' onClick={() => deleteTodo(todo.id)} color=\"secondary\">\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                    </MenuItem>\r\n                    :\r\n                    <div>\r\n                        <MenuItem onClick={handleClose}>\r\n                            <IconButton aria-label='delete' onClick={() => editHandler(todo.id)} color=\"primary\" size=\"small\">\r\n                                <EditSharpIcon />\r\n                            </IconButton>\r\n                        </MenuItem>\r\n                        <MenuItem onClick={handleClose}>\r\n                            <IconButton aria-label='delete' onClick={() => deleteTodo(todo.id)} color=\"secondary\" size=\"small\">\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </MenuItem>\r\n                    </div>\r\n                }\r\n            </Menu>\r\n        </>\r\n    )\r\n} \r\n\r\nexport default TodoActions;\r\n\r\n\r\n\r\n","import React, {useContext, useState, useEffect} from 'react'\r\nimport { ListItem, Tooltip, ListItemText, ListItemSecondaryAction, Paper, makeStyles,TextField } from '@material-ui/core';\r\nimport {GlobalContext} from \"../context/Provider\";\r\nimport TodoActions from \"./TodoActions\";\r\n\r\nconst styles = makeStyles({\r\n    container: {\r\n        marginBottom: \"15px\",\r\n        \"&:hover\": {\r\n            boxShadow: \"0px 5px 5px -3px rgba(0,0,0,0.2), 0px 8px 10px 1px rgba(0,0,0,0.14), 0px 3px 14px 2px rgba(0,0,0,0.12)\",\r\n            cursor: \"pointer\"\r\n        }\r\n    },\r\n    complete: {\r\n        color: \"green\",\r\n        textDecoration: \"line-through\",\r\n    },\r\n    incomplete: {\r\n        color: \"red\",\r\n        textDecoration: \"none\",\r\n    }\r\n});\r\n\r\n\r\nfunction TodoItem({todo}) {\r\n    const { onCheckHandler } = useContext(GlobalContext); \r\n    const classes = styles();\r\n\r\n    const [inputValue, setInputValue] = useState(todo.taskText);\r\n\r\n    const changeHandler = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n   \r\n    return (\r\n        <Paper className={classes.container} elevation={3}>\r\n            <ListItem  onDoubleClick={() => onCheckHandler(todo.id)}>\r\n                {/* <Checkbox tabIndex={-1} onChange={() => onCheckHandler(todo.id)} checked={todo.isComplete} color=\"primary\" size=\"small\" /> */}\r\n                {\r\n                    todo.isEdit ? \r\n                    <TextField id=\"inputText\" color=\"primary\" value={inputValue} onChange={(e) => changeHandler(e)} fullWidth multiline />\r\n                    :\r\n                    <ListItemText \r\n                        primary={todo.taskText} \r\n                        className={todo.isComplete ? classes.complete : classes.incomplete}\r\n                    />\r\n                }\r\n                <ListItemSecondaryAction>\r\n                    <TodoActions todo={todo} inputValue={inputValue} />\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, {useContext} from 'react'\r\nimport { List,  Typography } from '@material-ui/core';\r\nimport TodoItem from './TodoItem';\r\n// import NoData from \"./Nodata\";\r\nimport { GlobalContext } from '../context/Provider';\r\n\r\n\r\n\r\nfunction CompletedList() {\r\n\r\n    const {completedList} = useContext(GlobalContext);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                completedList.length === 0 || typeof(completedList) === undefined ? \r\n                 null : \r\n                <>\r\n                    <Typography variant=\"h5\" align=\"center\" style={{color: 'green'}}>\r\n                        Completed ({completedList.length})\r\n                    </Typography>\r\n                    <List>\r\n                        {\r\n                            completedList.map((todo, index) => (\r\n                                <TodoItem key={todo.id} todo={todo}  />\r\n                            ))\r\n                        }\r\n                    </List>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CompletedList;\r\n","import React, {useContext} from 'react'\r\nimport { List,  Typography } from '@material-ui/core';\r\nimport TodoItem from './TodoItem';\r\nimport {GlobalContext} from \"../context/Provider\"\r\n\r\nfunction IncompletedList() {\r\n    \r\n    const {inCompleteList} = useContext(GlobalContext);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                inCompleteList.length === 0 || typeof(inCompleteList) === undefined ? \r\n                null\r\n                :\r\n                <>\r\n                    <Typography variant=\"h5\" align=\"center\" color=\"error\">\r\n                        Incomplete ({inCompleteList.length})\r\n                    </Typography>\r\n                    <List> \r\n                        {\r\n                            inCompleteList.map((todo) => (\r\n                                <TodoItem key={todo.id} todo={todo}  />\r\n                            ))\r\n                        }\r\n                    </List>\r\n                </>\r\n            }\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default IncompletedList;\r\n","import React from 'react'\r\nimport {Typography, makeStyles, AppBar} from '@material-ui/core'\r\n\r\nconst myStyle = makeStyles({\r\n    root: {\r\n        \r\n    },\r\n    title: {\r\n        fontWeight: \"bold\",\r\n        margin: \"15px 0px\",\r\n    }\r\n})\r\n\r\nfunction Header({text}) {\r\n    const classes = myStyle();\r\n    return (\r\n        <AppBar className={classes.root}>\r\n            <Typography variant=\"h4\" align=\"center\" className={classes.title}  >\r\n                {text}\r\n            </Typography>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Grid, Container} from '@material-ui/core';\r\nimport TodoForm from './components/TodoForm';\r\nimport CompletedList from './components/CompletedList';\r\nimport IncompletedList from './components/IncompleteList';\r\nimport Provider from './context/Provider';\r\nimport Header from './components/Header';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider>\r\n      <Container maxWidth={\"lg\"} >\r\n        <Header text=\"Task Tracker\" />\r\n        <TodoForm  />\r\n        <Grid container spacing={3} style={{ marginTop: 30 }} >\r\n          <Grid item md={6} xs={12}>\r\n            <IncompletedList />  \r\n          </Grid>\r\n          <Grid item md={6} xs={12}>\r\n            <CompletedList />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}