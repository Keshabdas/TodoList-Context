{"version":3,"sources":["context/AppReducer.js","context/Provider.js","components/TodoForm.js","components/TodoActions.js","components/TodoItem.js","components/CompletedList.js","components/IncompleteList.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","todos","payload","filter","todo","id","initialState","JSON","parse","window","localStorage","getItem","user","name","GlobalContext","createContext","Provider","children","useReducer","appReducer","dispatch","completedList","isComplete","inCompleteList","useEffect","Todos","setItem","stringify","UpdateLS","value","addTodo","trimmedText","trim","newTask","Math","floor","random","taskText","isEdit","length","deleteTodo","onCheckHandler","currentTodos","selectedIndex","findIndex","editHandler","editDone","TodoForm","saveTodo","useState","setvalue","useContext","onSubmit","event","preventDefault","TextField","variant","placeholder","onChange","e","target","fullWidth","TodoActions","inputValue","IconButton","aria-label","onClick","color","styles","makeStyles","container","marginBottom","complete","textDecoration","incomplete","TodoItem","index","classes","setInputValue","Paper","className","elevation","ListItem","key","toString","button","Checkbox","tabIndex","checked","size","label","ListItemText","primary","ListItemSecondaryAction","CompletedList","undefined","Typography","align","style","List","map","IncompletedList","margin","myStyle","root","fontWeight","Header","text","App","Container","maxWidth","Grid","spacing","item","xs","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8efb0e73.chunk.js","sourcesContent":["export default (state, action) => {\r\n    switch(action.type){\r\n        case \"ADD_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos, action.payload],\r\n            }\r\n        case \"REMOVE_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: state.todos.filter(todo => todo.id !== action.payload)\r\n            }\r\n        case \"CHECK_HANDLER\":\r\n            return {\r\n                ...state,\r\n                todos: action.payload\r\n            }\r\n        case \"EDIT_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: action.payload\r\n            }\r\n        case \"TEXT_EDIT_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: action.payload\r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n","import React, {createContext, useReducer, useEffect} from 'react'\r\nimport appReducer from \"./AppReducer\"\r\nconst initialState = {\r\n    todos: JSON.parse(window.localStorage.getItem(\"todos\")) || [],\r\n    user: [\r\n        {id:1, name: \"Keshab\"},\r\n        {id:2, name: \"kiran\"}\r\n    ],\r\n}\r\n\r\nexport const GlobalContext = createContext(initialState);  // Context is defined here\r\n\r\nfunction Provider({children}) {\r\n    const [state, dispatch] = useReducer(appReducer, initialState);\r\n    \r\n    const completedList = state.todos.filter(todo => todo.isComplete === true);\r\n    const inCompleteList = state.todos.filter(todo => todo.isComplete === false);\r\n\r\n    const addTodo = (value) => {\r\n        let trimmedText = value.trim();\r\n        let newTask = {\r\n            id: Math.floor(Math.random() * 100000000),\r\n            taskText: trimmedText,\r\n            isComplete: false,\r\n            isEdit: false,\r\n        }\r\n        if(trimmedText.length > 0){\r\n            dispatch({\r\n                type: \"ADD_TODO\",\r\n                payload: newTask\r\n            })\r\n        }\r\n    }\r\n\r\n    const deleteTodo = (value) => {\r\n        dispatch({\r\n            type: \"REMOVE_TODO\",\r\n            payload: value\r\n        })\r\n    }\r\n\r\n    const onCheckHandler = (id) => {\r\n        let currentTodos = [...state.todos];\r\n        let selectedIndex = currentTodos.findIndex(todo => todo.id == id);\r\n        currentTodos[selectedIndex].isComplete = !currentTodos[selectedIndex].isComplete;\r\n        currentTodos[selectedIndex].isEdit = false;\r\n        dispatch({\r\n            type: \"CHECK_HANDLER\",\r\n            payload: currentTodos\r\n        })\r\n    }\r\n\r\n    const editHandler = (id) => {\r\n        let currentTodos = [...state.todos];\r\n        let selectedIndex = currentTodos.findIndex(todo => todo.id == id);\r\n        currentTodos[selectedIndex].isEdit = !currentTodos[selectedIndex].isEdit;\r\n        dispatch({\r\n            type: \"EDIT_TODO\",\r\n            payload: currentTodos\r\n        })\r\n    }\r\n\r\n    const editDone = (id, value) => {\r\n        let currentTodos = [...state.todos];\r\n        let selectedIndex = currentTodos.findIndex(todo => todo.id == id);\r\n        currentTodos[selectedIndex].isEdit = !currentTodos[selectedIndex].isEdit;\r\n        currentTodos[selectedIndex].taskText = value;\r\n        dispatch({\r\n            type: \"TEXT_EDIT_TODO\",\r\n            payload: currentTodos\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const UpdateLS = (todos) => {\r\n            let Todos = [...todos];\r\n            window.localStorage.setItem(\"todos\", JSON.stringify(Todos));\r\n        }\r\n        UpdateLS(state.todos);\r\n    }, [state.todos])\r\n\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{\r\n            todos: state.todos,\r\n            completedList,\r\n            inCompleteList,\r\n            addTodo,\r\n            deleteTodo,\r\n            onCheckHandler,\r\n            editHandler,\r\n            editDone\r\n        }}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Provider;\r\n","import React, { useState, useContext } from 'react'\r\nimport { TextField } from '@material-ui/core'\r\nimport {GlobalContext} from \"../context/Provider\"\r\n\r\nfunction TodoForm({saveTodo}) {\r\n    const [value, setvalue] = useState('');\r\n    const {addTodo}  = useContext(GlobalContext);\r\n\r\n    return (\r\n        <form\r\n            onSubmit={event => {\r\n                event.preventDefault();\r\n                addTodo(value);\r\n                setvalue('')\r\n            }}\r\n        >\r\n            <TextField \r\n                variant=\"outlined\" \r\n                placeholder=\"type and hit enter...\"  \r\n                value={value} \r\n                onChange={(e)=> setvalue(e.target.value)} \r\n                fullWidth \r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useContext } from 'react';\r\nimport { IconButton } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditSharpIcon from '@material-ui/icons/EditSharp';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport {GlobalContext} from \"../context/Provider\";\r\n\r\nconst TodoActions = ({todo, inputValue}) => {\r\n    const {deleteTodo, editHandler, editDone} = useContext(GlobalContext); \r\n\r\n    return (\r\n        <div>\r\n            {\r\n                todo.isComplete ? \r\n                <>\r\n                    <IconButton aria-label='delete' onClick={() => deleteTodo(todo.id)} color=\"secondary\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </> \r\n                :\r\n                <>\r\n                    {\r\n                        todo.isEdit ? \r\n                        <IconButton aria-label='delete' onClick={() => editDone(todo.id, inputValue)} color=\"primary\">\r\n                            <DoneIcon />\r\n                        </IconButton>\r\n                        :\r\n                        <>\r\n                            <IconButton aria-label='delete' onClick={() => editHandler(todo.id)} color=\"primary\">\r\n                                <EditSharpIcon />\r\n                            </IconButton>\r\n                            <IconButton aria-label='delete' onClick={() => deleteTodo(todo.id)} color=\"secondary\">\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </>\r\n                    }\r\n                   \r\n                </> \r\n            }\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default TodoActions;\r\n\r\n\r\n\r\n","import React, {useContext, useState} from 'react'\r\nimport { ListItem, Checkbox, ListItemText, ListItemSecondaryAction, IconButton, Paper, makeStyles,TextField } from '@material-ui/core';\r\nimport {GlobalContext} from \"../context/Provider\";\r\nimport TodoActions from \"./TodoActions\";\r\n\r\nconst styles = makeStyles({\r\n    container: {\r\n        marginBottom: \"15px\",\r\n    },\r\n    complete: {\r\n        color: \"green\",\r\n        textDecoration: \"line-through\",\r\n    },\r\n    incomplete: {\r\n        color: \"red\",\r\n        textDecoration: \"none\",\r\n    }\r\n});\r\n\r\n\r\nfunction TodoItem({todo, index}) {\r\n    const { onCheckHandler } = useContext(GlobalContext); \r\n    const classes = styles();\r\n\r\n    const [inputValue, setInputValue] = useState(todo.taskText);\r\n\r\n    return (\r\n        <Paper className={classes.container} elevation={5}>\r\n            <ListItem key={index.toString()} button>\r\n                <Checkbox tabIndex={-1} onChange={() => onCheckHandler(todo.id)} checked={todo.isComplete} color=\"primary\" size=\"small\" />\r\n                {\r\n                    todo.isEdit ? \r\n                    <TextField id=\"\" label=\"\" color=\"secondary\" value={inputValue} onChange={(e) => setInputValue(e.target.value)} fullWidth /> :\r\n                    <ListItemText \r\n                        primary={todo.taskText} \r\n                        className={todo.isComplete ? classes.complete : classes.incomplete}\r\n                    />\r\n                }\r\n                <ListItemSecondaryAction>\r\n                    <TodoActions todo={todo} inputValue={inputValue}  />\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, {useState, useContext,useEffect} from 'react'\r\nimport { List,  Typography } from '@material-ui/core';\r\nimport TodoItem from './TodoItem';\r\nimport NoData from \"./Nodata\";\r\nimport { GlobalContext } from '../context/Provider';\r\n\r\n\r\n\r\nfunction CompletedList() {\r\n\r\n    const {completedList} = useContext(GlobalContext);\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                completedList.length == 0 || typeof(completedList) === undefined ? \r\n                 null : \r\n                <>\r\n                    <Typography variant=\"h5\" align=\"center\" style={{color: 'green'}}>\r\n                        Completed ({completedList.length})\r\n                    </Typography>\r\n                    <List>\r\n                        {\r\n                            completedList.map((todo, index) => (\r\n                                <TodoItem key={index} todo={todo}  index={index}  />\r\n                            ))\r\n                        }\r\n                    </List>\r\n                </>\r\n            }\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default CompletedList;\r\n","import React, {useContext} from 'react'\r\nimport { List,  Typography } from '@material-ui/core';\r\nimport TodoItem from './TodoItem';\r\nimport {GlobalContext} from \"../context/Provider\"\r\nimport Nodata from './Nodata';\r\n\r\nfunction IncompletedList() {\r\n    const {inCompleteList} = useContext(GlobalContext);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                inCompleteList.length == 0 || typeof(inCompleteList) === undefined ? \r\n                // <Nodata text=\"No incomplete task available\" /> \r\n                null\r\n                :\r\n                <>\r\n                    <Typography variant=\"h5\" align=\"center\" color=\"error\" style={{margin: \"20px 0px 10px\"}}>\r\n                        Incomplete ({inCompleteList.length})\r\n                    </Typography>\r\n                    <List> \r\n                        {\r\n                            inCompleteList.map((todo, index) => (\r\n                                <TodoItem key={index} todo={todo} index={index}  />\r\n                            ))\r\n                        }\r\n                    </List>\r\n                </>\r\n            }\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default IncompletedList;\r\n","import React from 'react'\r\nimport {Typography, makeStyles} from '@material-ui/core'\r\n\r\nconst myStyle = makeStyles({\r\n    root: {\r\n        margin: \"15px 0px\",\r\n        fontWeight: \"bold\"\r\n    }\r\n})\r\n\r\nfunction Header({text}) {\r\n    const classes = myStyle();\r\n    return (\r\n        <Typography variant=\"h4\" align=\"center\" className={classes.root} color=\"primary\" >\r\n          {text}\r\n        </Typography>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport { Grid, Container} from '@material-ui/core'\nimport TodoForm from './components/TodoForm';\nimport CompletedList from './components/CompletedList';\nimport IncompletedList from './components/IncompleteList';\nimport Provider from './context/Provider';\nimport Header from './components/Header';\nimport './App.css'\n\nfunction App() {\n\n  return (\n    <Provider>\n      <Container maxWidth={\"md\"} >\n        <Header text=\"Task Tracker\" />\n        <TodoForm  />\n        <Grid container spacing={3} >\n          <Grid item  xs={12}  >\n            <IncompletedList />  \n          </Grid>\n          <Grid item  xs={12}>\n            <CompletedList />\n          </Grid>\n        </Grid>\n      </Container>\n    </Provider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}