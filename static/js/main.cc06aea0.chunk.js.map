{"version":3,"sources":["context/AppReducer.js","context/Provider.js","components/TodoForm.js","components/HideOnScroll.js","components/Header.js","components/TodoActions.js","components/TodoItem.js","components/Nodata.js","components/CompletedList.js","components/IncompleteList.js","containers/WebView.js","containers/MobileView.js","components/ScrollToTp.js","components/CustomSnackbar.js","components/CustomDialog.js","containers/index.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","todos","payload","filter","todo","id","isSnackBarOpen","alertSeverity","alertType","alertMessage","message","isDialogOpen","todoSelected","dialogTitle","title","dialogContent","content","isDarkModeOn","initialState","JSON","parse","window","localStorage","getItem","Boolean","parseInt","GlobalContext","createContext","Provider","children","useReducer","appReducer","dispatch","useEffect","UpdateLS","completedList","isComplete","inCompleteList","showSnackbar","openSnackbar","msg","Todos","setItem","stringify","value","addTodo","trimmedText","trim","newTask","Date","now","createdAt","completedOn","taskText","isEdit","length","deleteTodo","onCheckHandler","currentTodos","selectedIndex","findIndex","editHandler","editDone","defaultValue","closeSnackbar","showDialog","hideDialog","changeTheme","mode","TodoForm","useState","setvalue","useContext","Paper","elevation","style","marginTop","onSubmit","event","preventDefault","TextField","variant","placeholder","onChange","e","target","fullWidth","autoFocus","InputProps","endAdornment","IconButton","onClick","color","HideOnScroll","props","trigger","useScrollTrigger","undefined","Slide","appear","direction","in","myStyle","makeStyles","theme","root","display","flexDirection","background","palette","themeIcon","flex","fontWeight","margin","Header","classes","handleOnClick","handleThemeChange","currentTime","getHours","AppBar","className","Typography","align","text","Tooltip","aria-label","TodoActions","inputValue","setInputValue","React","anchorEl","setAnchorEl","handleClose","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","open","onClose","MenuItem","size","styles","container","marginBottom","marginLeft","marginRight","boxShadow","cursor","width","backgroundColor","paddingLeft","isMobile","paddingTop","paddingBottom","complete","textDecoration","incomplete","secondaryTxt","fontSize","primaryTxt","wordBreak","secondaryAction","right","secondaryActionMobile","TodoItem","taskDate","toDateString","taskCompletedDate","leftContent","ListItem","height","ListItemIcon","minWidth","ListItemText","primary","rightContent","textAlign","justifyContent","swipeLeft","swipeRight","onDoubleClick","changeHandler","multiline","secondary","ListItemSecondaryAction","useStyles","main","placeItems","Nodata","primaryText","secondaryText","CompletedList","List","map","index","key","IncompletedList","WebView","Grid","spacing","item","md","xs","position","bottom","maxWidth","appBar","top","StyledBadge","withStyles","badge","Badge","MobileView","setValue","BottomNavigation","showLabels","newValue","BottomNavigationAction","label","icon","badgeContent","desktop","mob","left","ScrollToTp","disableHysteresis","threshold","Zoom","anchor","ownerDocument","document","querySelector","scrollIntoView","behavior","block","role","CustomSnackbar","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","severity","CustomDialog","Dialog","aria-labelledby","DialogTitle","DialogContent","dividers","DialogContentText","DialogActions","Button","Mainview","darkState","setDarkState","darkTheme","createMuiTheme","body","classList","toggle","ThemeProvider","Fab","App","test","navigator","userAgent","Container","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc06aea0.chunk.js","sourcesContent":["export default (state, action) => {\r\n    switch(action.type){\r\n        case \"ADD_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: [action.payload, ...state.todos],\r\n            }\r\n        case \"REMOVE_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: state.todos.filter(todo => todo.id !== action.payload)\r\n            }\r\n        case \"CHECK_HANDLER\":\r\n            return {\r\n                ...state,\r\n                todos: action.payload\r\n            }\r\n        case \"EDIT_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: action.payload\r\n            }\r\n        case \"TEXT_EDIT_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: action.payload\r\n            }\r\n        case \"OPEN_SNACKBAR\":\r\n            return {\r\n                ...state,\r\n                isSnackBarOpen: true,\r\n                alertSeverity: action.payload.alertType,\r\n                alertMessage: action.payload.message,\r\n            }\r\n        case \"CLOSE_SNACKBAR\":\r\n            return {\r\n                ...state,\r\n                isSnackBarOpen: false,\r\n                alertSeverity: '',\r\n                alertMessage: '',\r\n            }\r\n        case \"SHOW_DIALOG\":\r\n            return {\r\n                ...state,\r\n                isDialogOpen: true,\r\n                todoSelected: action.payload.id,\r\n                dialogTitle: action.payload.title,\r\n                dialogContent: action.payload.content,\r\n            }\r\n        case \"HIDE_DIALOG\":\r\n            return {\r\n                ...state,\r\n                isDialogOpen: false,\r\n                todoSelected: null,\r\n                dialogTitle: '',    \r\n                dialogContent: '',\r\n            }\r\n        case \"CHANGE_THEME\":\r\n            return {\r\n                ...state,\r\n                isDarkModeOn: action.payload,\r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n","import React, {createContext, useReducer, useEffect} from 'react'\r\nimport appReducer from \"./AppReducer\"\r\nconst initialState = {\r\n    todos: JSON.parse(window.localStorage.getItem(\"todos\")) || [],\r\n    isSnackBarOpen: false,\r\n    alertSeverity: '',\r\n    alertMessage: '',\r\n    isDialogOpen: false,\r\n    dialogTitle: '',\r\n    dialogContent: '',\r\n    todoSelected: null,\r\n    isDarkModeOn: Boolean(parseInt(window.localStorage.getItem(\"darkMode\"), 10)) || false,\r\n}\r\n\r\nexport const GlobalContext = createContext(initialState);  // Context is defined here\r\n\r\nfunction Provider({children}) {\r\n    const [state, dispatch] = useReducer(appReducer, initialState);\r\n    \r\n    useEffect(() => {\r\n        UpdateLS(state.todos);\r\n    }, [state]);\r\n\r\n    // state bindings\r\n    const completedList = state.todos.filter(todo => todo.isComplete === true);\r\n    const inCompleteList = state.todos.filter(todo => todo.isComplete === false);\r\n    const showSnackbar = state.isSnackBarOpen;\r\n    const alertSeverity = state.alertSeverity;\r\n    const alertMessage = state.alertMessage;\r\n    const todoSelected = state.todoSelected;\r\n    const isDarkModeOn = state.isDarkModeOn;\r\n\r\n    // all actions \r\n    const addTodo = (value) => {\r\n        let trimmedText = value.trim();\r\n        let newTask = {\r\n            id: Date.now(),\r\n            createdAt: Date.now(),\r\n            completedOn: null,\r\n            taskText: trimmedText,\r\n            isComplete: false,\r\n            isEdit: false,\r\n        }\r\n        if(trimmedText.length > 0){\r\n            dispatch({\r\n                type: \"ADD_TODO\",\r\n                payload: newTask\r\n            });\r\n            openSnackbar('success', 'New Task Added');\r\n            // if (state.todos && state.todos.length < 2) setTimeout(() => openSnackbar('info', 'Double tap/click on a task to mark it Complete or Incomplete'), 5000);\r\n        }\r\n    }\r\n\r\n    const deleteTodo = (value) => {\r\n        dispatch({\r\n            type: \"REMOVE_TODO\",\r\n            payload: value\r\n        });\r\n        openSnackbar('error', 'Task Deleted.')\r\n    }   \r\n\r\n    const onCheckHandler = (id) => {\r\n        let currentTodos = [...state.todos];\r\n        let selectedIndex = currentTodos.findIndex(todo => todo.id === id);\r\n        currentTodos[selectedIndex].isComplete = !currentTodos[selectedIndex].isComplete;\r\n        currentTodos[selectedIndex].isEdit = false;\r\n        currentTodos[selectedIndex].completedOn = Date.now();\r\n        dispatch({\r\n            type: \"CHECK_HANDLER\",\r\n            payload: currentTodos\r\n        })\r\n        currentTodos[selectedIndex].isComplete && openSnackbar('success', 'Task Completed.');\r\n    }\r\n\r\n    const editHandler = (id) => {\r\n        let currentTodos = [...state.todos];\r\n        let selectedIndex = currentTodos.findIndex(todo => todo.id === id);\r\n        currentTodos[selectedIndex].isEdit = !currentTodos[selectedIndex].isEdit;\r\n        dispatch({\r\n            type: \"EDIT_TODO\",\r\n            payload: currentTodos\r\n        })\r\n    }\r\n\r\n    const editDone = (id, value, defaultValue) => {\r\n        let currentTodos = [...state.todos];\r\n        let selectedIndex = currentTodos.findIndex(todo => todo.id === id);\r\n        currentTodos[selectedIndex].isEdit = !currentTodos[selectedIndex].isEdit;\r\n        if(value === ''){\r\n            currentTodos[selectedIndex].taskText = defaultValue.trim();\r\n        } else {\r\n            currentTodos[selectedIndex].taskText = value.trim();\r\n        }\r\n        dispatch({\r\n            type: \"TEXT_EDIT_TODO\",\r\n            payload: currentTodos\r\n        })\r\n        openSnackbar('success', 'Task Edited.');\r\n    }\r\n\r\n    const openSnackbar = (type, msg) => {\r\n        dispatch({\r\n            type: \"OPEN_SNACKBAR\",\r\n            payload: {alertType: type, message: msg}\r\n        })\r\n    }\r\n    const closeSnackbar = (type, msg) => {\r\n        dispatch({\r\n            type: \"CLOSE_SNACKBAR\",\r\n        });\r\n    }\r\n\r\n    const showDialog = (id, title, content) => {\r\n        dispatch({\r\n            type: \"SHOW_DIALOG\",\r\n            payload: {id, title, content},\r\n        })\r\n    }\r\n\r\n    const hideDialog = () => {\r\n        dispatch({\r\n            type: \"HIDE_DIALOG\",\r\n        })\r\n    }\r\n    const changeTheme = () => {\r\n        dispatch({\r\n            type: \"CHANGE_THEME\",\r\n            payload: !isDarkModeOn,\r\n        });\r\n        let mode = !isDarkModeOn ? 1 : 0;\r\n        window.localStorage.setItem(\"darkMode\",  mode);\r\n    }\r\n\r\n    const UpdateLS = (todos) => {\r\n        let Todos = [...todos];\r\n        window.localStorage.setItem(\"todos\", JSON.stringify(Todos));\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider \r\n            value={{\r\n                todos: state.todos,\r\n                completedList,\r\n                inCompleteList,\r\n                todoSelected,\r\n                isDarkModeOn,\r\n                addTodo,\r\n                deleteTodo,\r\n                onCheckHandler,\r\n                editHandler,\r\n                editDone,\r\n                showSnackbar,\r\n                alertSeverity,\r\n                alertMessage,\r\n                openSnackbar,\r\n                closeSnackbar,\r\n                showDialog,\r\n                hideDialog,\r\n                changeTheme,\r\n                isDialogOpen: state.isDialogOpen,\r\n                dialogTitle: state.dialogTitle,\r\n                dialogContent: state.dialogContent,\r\n            }}>\r\n                {children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Provider;\r\n","import React, { useState, useContext } from 'react'\r\nimport { TextField, Paper, IconButton } from '@material-ui/core'\r\nimport {GlobalContext} from \"../context/Provider\"\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nfunction TodoForm() {\r\n    const [value, setvalue] = useState('');\r\n    const {addTodo}  = useContext(GlobalContext);\r\n\r\n    const ClearInput = () => (\r\n        <IconButton onClick={() => setvalue('')}>\r\n            <ClearIcon color=\"action\" />\r\n        </IconButton>\r\n    );\r\n\r\n    return (\r\n        <Paper elevation={10} style={{ marginTop: 71 }}>\r\n            <form\r\n                onSubmit={event => {\r\n                    event.preventDefault();\r\n                    addTodo(value);\r\n                    setvalue('')\r\n                }}\r\n            >\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    placeholder=\"type here to add and hit enter.....\"  \r\n                    value={value} \r\n                    onChange={(e)=> setvalue(e.target.value)} \r\n                    fullWidth \r\n                    autoFocus={true}\r\n                    InputProps={{\r\n                        endAdornment: value.length === 0 ? null : <ClearInput />\r\n                    }}\r\n                />\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default TodoForm;\r\n","import React from 'react';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\r\n\r\nfunction HideOnScroll(props) {\r\n    const { children, window } = props;\r\n    const trigger = useScrollTrigger({ target: window ? window() : undefined });\r\n\r\n    return (\r\n      <Slide appear={false} direction=\"down\" in={!trigger}>\r\n        {children}\r\n      </Slide>\r\n    );\r\n}\r\n\r\nexport default HideOnScroll;\r\n","import React, { useContext, useEffect } from 'react'\r\nimport {Typography, makeStyles, AppBar, IconButton, Tooltip} from '@material-ui/core'\r\nimport HideOnScroll from './HideOnScroll';\r\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\r\nimport Brightness7Icon from '@material-ui/icons/Brightness7';\r\nimport { GlobalContext } from '../context/Provider';\r\n\r\nconst myStyle = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        background: theme.palette.type === 'dark' ? '#333' : null,\r\n    },\r\n    themeIcon: {\r\n        flex: 1,\r\n    },\r\n    title: {\r\n        fontWeight: \"bold\",\r\n        margin: \"15px 0px\",\r\n        flex: 40,\r\n    }\r\n}))\r\n\r\nfunction Header(props) {\r\n    const classes = myStyle();\r\n    const {changeTheme, isDarkModeOn} = useContext(GlobalContext);\r\n\r\n    const handleOnClick = () => {\r\n        props.handleThemeChange();\r\n        changeTheme();\r\n    }\r\n\r\n    useEffect(() => {\r\n      let CurrentDate = new Date();\r\n      var currentTime = CurrentDate.getHours();\r\n      let changedModeManually = localStorage.getItem('darkMode');\r\n      if(changedModeManually === null && (currentTime >= 21 || currentTime <= 6)) {\r\n        handleOnClick();\r\n      }\r\n    }, [])\r\n\r\n    return (\r\n        <HideOnScroll {...props}>\r\n            <AppBar className={classes.root} >\r\n                <Typography variant=\"h4\" align=\"center\" className={classes.title}  >\r\n                    {props.text}\r\n                </Typography>\r\n                <Tooltip title=\"Toggle dark/light theme\" aria-label=\"Toggle dark/light theme\">\r\n                    <IconButton className={classes.themeIcon} onClick={() => handleOnClick()}>\r\n                        {isDarkModeOn ? (\r\n                            <Brightness7Icon style={{ color: '#fff' }} />\r\n                        ) : (\r\n                            <Brightness4Icon style={{ color: '#fff' }} />\r\n                        )}\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </AppBar>\r\n        </HideOnScroll>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React, { useContext } from 'react';\r\nimport { IconButton, Menu, MenuItem, Tooltip } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditSharpIcon from '@material-ui/icons/EditSharp';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {GlobalContext} from \"../context/Provider\";\r\n\r\nconst TodoActions = ({todo, inputValue, setInputValue}) => {\r\n    const {deleteTodo, editHandler, editDone, showDialog} = useContext(GlobalContext); \r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleEditDone = () => {\r\n        editDone(todo.id, inputValue, todo.taskText);\r\n        setInputValue(inputValue.trim());\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* {\r\n                todo.isComplete ? \r\n                <>\r\n                    <IconButton aria-label='delete' onClick={() => deleteTodo(todo.id)} color=\"secondary\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </> \r\n                :\r\n                <>\r\n                    {\r\n                        todo.isEdit ? \r\n                        <IconButton aria-label='delete' onClick={() => editDone(todo.id, inputValue, todo.taskText)} color=\"primary\">\r\n                            <DoneIcon />\r\n                        </IconButton>\r\n                        :\r\n                        <>\r\n                            <IconButton aria-label='delete' onClick={() => editHandler(todo.id)} color=\"primary\">\r\n                                <EditSharpIcon />\r\n                            </IconButton>\r\n                            <IconButton aria-label='delete' onClick={() => deleteTodo(todo.id)} color=\"secondary\">\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </>\r\n                    }\r\n                   \r\n                </> \r\n            } */}\r\n            {\r\n                todo.isEdit ? \r\n                <IconButton aria-label='delete' onClick={() => handleEditDone()} color=\"primary\">\r\n                    <DoneIcon />\r\n                </IconButton> \r\n                :\r\n                <Tooltip title=\"options\">\r\n                    <IconButton\r\n                        aria-label=\"more\"\r\n                        aria-controls=\"long-menu\"\r\n                        aria-haspopup=\"true\"\r\n                        onClick={handleClick}\r\n                    >\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            }\r\n            <Menu\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                {\r\n                    todo.isComplete ? \r\n                    <MenuItem onClick={handleClose}>\r\n                        <IconButton aria-label='delete' onClick={() => deleteTodo(todo.id)} color=\"secondary\">\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                    </MenuItem>\r\n                    :\r\n                    <div>\r\n                        <MenuItem onClick={handleClose}>\r\n                            <IconButton aria-label='delete' onClick={() => editHandler(todo.id)} color=\"primary\" size=\"small\">\r\n                                <EditSharpIcon />\r\n                            </IconButton>\r\n                        </MenuItem>\r\n                        <MenuItem onClick={handleClose}>\r\n                            <IconButton aria-label='delete' onClick={() => showDialog(todo.id, 'Delete Task', 'Are you sure you want to delete this ?')} color=\"secondary\" size=\"small\">\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </MenuItem>\r\n                    </div>\r\n                }\r\n            </Menu>\r\n        </>\r\n    )\r\n} \r\n\r\nexport default TodoActions;\r\n\r\n\r\n\r\n","import React, {useContext, useState} from 'react'\r\nimport { ListItem, ListItemText, ListItemSecondaryAction, Paper, makeStyles,TextField } from '@material-ui/core';\r\nimport {GlobalContext} from \"../context/Provider\";\r\nimport TodoActions from \"./TodoActions\";\r\nimport { SwipeableListItem } from '@sandstreamdev/react-swipeable-list';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\nconst styles = makeStyles((theme) => ({\r\n    container: {\r\n        marginBottom: \"15px\",\r\n        marginLeft: 5,\r\n        marginRight: 5,\r\n        \"&:hover\": {\r\n            boxShadow: \"0px 5px 5px -3px rgba(0,0,0,0.2), 0px 8px 10px 1px rgba(0,0,0,0.14), 0px 3px 14px 2px rgba(0,0,0,0.12)\",\r\n            cursor: \"pointer\"\r\n        },\r\n        \"& .MuiListItem-container\": {\r\n            width: '100%',\r\n        },\r\n        \"& .listItem\": {\r\n            backgroundColor: theme.palette.type === 'dark' ?  '#424242' : null,\r\n            paddingLeft: props => props.isMobile ? 10 : null,\r\n            paddingTop: props => props.isMobile ? 5 : null,\r\n            paddingBottom: props => props.isMobile ? 5 : null,\r\n            \"& .MuiListItemText-multiline\": {\r\n                marginTop: props => props.isMobile ? 0 : null,\r\n                marginBottom: props => props.isMobile ? 0 : null,\r\n            }\r\n        }\r\n    },\r\n    complete: {\r\n        color: theme.palette.type === 'dark' ? null : \"green\",\r\n        '& > span': {\r\n            textDecoration: \"line-through\",\r\n        }\r\n    },\r\n    incomplete: {\r\n        color: theme.palette.type === 'dark' ? null : \"red\",\r\n        textDecoration: \"none\",\r\n    },\r\n    secondaryTxt: {\r\n        fontSize: 12,\r\n        marginTop: 8,\r\n    },\r\n    primaryTxt: {\r\n        fontSize: '1.2rem',\r\n        wordBreak: 'break-word',\r\n    },\r\n    secondaryAction: {\r\n        right: 4,\r\n    },\r\n    secondaryActionMobile: {\r\n        right: 2,\r\n    }\r\n}));\r\n\r\n\r\nfunction TodoItem({todo, isMobile, completedList}) {\r\n    const { onCheckHandler, showDialog, deleteTodo } = useContext(GlobalContext); \r\n    const classes = styles({isMobile});\r\n\r\n    const [inputValue, setInputValue] = useState(todo.taskText);\r\n\r\n    const changeHandler = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const taskDate = (todo.createdAt && new Date(todo.createdAt).toDateString()) || '';\r\n    const taskCompletedDate = (todo.completedOn && new Date(todo.completedOn).toDateString()) || taskDate;\r\n\r\n    const leftContent = (\r\n        <ListItem style={{ background: 'green', height: '100%', color: '#fff' }}>\r\n            <ListItemIcon style={{ minWidth: 20, marginRight: 8 }}>\r\n                <DoneIcon style={{ color: '#fff' }} />\r\n            </ListItemIcon>\r\n            <ListItemText primary={completedList ? \"Mark Incomplete\" : \"Mark Complete\"} />\r\n        </ListItem>\r\n    );\r\n\r\n    const rightContent = (\r\n        <ListItem style={{ background: 'red', height: '100%', color: '#fff' }}>\r\n            <ListItemText primary=\"Delete\" style={{ textAlign: 'right' }} />\r\n            <ListItemIcon style={{ justifyContent: 'flex-end', minWidth: 20, marginLeft: 8 }}>\r\n                <DeleteOutlineIcon style={{ color: '#fff' }} />\r\n            </ListItemIcon>\r\n        </ListItem>\r\n    );\r\n   \r\n    return (\r\n        <Paper className={classes.container} elevation={3}>\r\n            <SwipeableListItem\r\n                swipeLeft={todo.isEdit ? null : {\r\n                    content: rightContent,\r\n                    action: () => completedList ? deleteTodo(todo.id) : showDialog(todo.id, 'Delete Task', 'Are you sure you want to delete this ?'),\r\n                }}\r\n                swipeRight={todo.isEdit ? null : {\r\n                    content: leftContent,\r\n                    action: () => onCheckHandler(todo.id)\r\n                }}\r\n            >\r\n                <ListItem  onDoubleClick={() => todo.isEdit ? null : onCheckHandler(todo.id)} className=\"listItem\">\r\n                    {\r\n                        todo.isEdit ? \r\n                        <TextField id=\"inputText\" color=\"primary\" value={inputValue} onChange={(e) => changeHandler(e)} fullWidth multiline />\r\n                        :\r\n                        <ListItemText \r\n                            multiline='true'\r\n                            primary={todo.taskText}\r\n                            secondary={completedList ? `Completed on: ${taskCompletedDate}` : `Created on: ${taskDate}`}\r\n                            className={todo.isComplete ? classes.complete : classes.incomplete}\r\n                            classes={{\r\n                                primary: classes.primaryTxt,\r\n                                secondary: classes.secondaryTxt\r\n                            }}\r\n                        />\r\n                    }\r\n                    <ListItemSecondaryAction classes={{ root: isMobile ? classes.secondaryActionMobile : classes.secondaryAction }}>\r\n                        <TodoActions todo={todo} inputValue={inputValue} setInputValue={setInputValue} />\r\n                    </ListItemSecondaryAction>\r\n                </ListItem>\r\n            </SwipeableListItem>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport { makeStyles, Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        display: 'grid',\r\n        placeItems: 'center',\r\n        height: '50vh',\r\n    },\r\n    text: {\r\n        color: '#777'\r\n    }\r\n})\r\n\r\nfunction Nodata({primaryText, secondaryText}) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <Typography variant=\"h5\" className={classes.text} align=\"center\">\r\n                {primaryText}\r\n                <br/>\r\n                {secondaryText}\r\n            </Typography>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nodata;\r\n","import React, {useContext} from 'react'\r\nimport { List,  Typography } from '@material-ui/core';\r\nimport TodoItem from './TodoItem';\r\nimport NoData from \"./Nodata\";\r\nimport { GlobalContext } from '../context/Provider';\r\n\r\n\r\n\r\nfunction CompletedList(props) {\r\n\r\n    const {completedList} = useContext(GlobalContext);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                completedList.length === 0 || typeof(completedList) === undefined ? \r\n                <>\r\n                    {props.isMobile ? <NoData primaryText=\"No Completed\" secondaryText=\"Task Available\" /> : null}\r\n                </> : \r\n                <>\r\n                    <Typography variant=\"h5\" align=\"center\" style={{color: 'green'}}>\r\n                        Completed {props.isMobile ? null : `(${completedList.length})`}\r\n                    </Typography>\r\n                    <List>\r\n                        {\r\n                            completedList.map((todo, index) => (\r\n                                <TodoItem key={todo.id} todo={todo} {...props} completedList={completedList}  />\r\n                            ))\r\n                        }\r\n                    </List>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CompletedList;\r\n","import React, {useContext} from 'react'\r\nimport { List,  Typography } from '@material-ui/core';\r\nimport TodoItem from './TodoItem';\r\nimport {GlobalContext} from \"../context/Provider\"\r\nimport Nodata from './Nodata';\r\nimport { SwipeableList } from '@sandstreamdev/react-swipeable-list';\r\nimport '@sandstreamdev/react-swipeable-list/dist/styles.css';\r\n\r\nfunction IncompletedList(props) {\r\n    \r\n    const {inCompleteList} = useContext(GlobalContext);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                inCompleteList.length === 0 || typeof(inCompleteList) === undefined ? \r\n                <>\r\n                {props.isMobile ? <Nodata primaryText=\"No Incompleted\" secondaryText=\"Task Available\" /> : null}\r\n                </>\r\n                :\r\n                <>\r\n                    <Typography variant=\"h5\" align=\"center\" color=\"error\">\r\n                        Incomplete {props.isMobile ? null : `(${inCompleteList.length})`}\r\n                    </Typography>\r\n                    <SwipeableList>\r\n                        <List> \r\n                            {\r\n                                inCompleteList.map((todo) => (\r\n                                        <TodoItem key={todo.id} todo={todo} {...props}   />\r\n                                    ))\r\n                                }\r\n                        </List>\r\n                    </SwipeableList>\r\n                </>\r\n            }\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default IncompletedList;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport CompletedList from '../components/CompletedList';\r\nimport IncompletedList from '../components/IncompleteList';\r\n\r\nfunction WebView() {\r\n    return (\r\n        <Grid container spacing={3} style={{ marginTop: 30 }} >\r\n          <Grid item md={6} xs={12}>\r\n            <IncompletedList />  \r\n          </Grid>\r\n          <Grid item md={6} xs={12}>\r\n            <CompletedList />\r\n          </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default WebView;\r\n","import React, { useContext } from 'react';\r\nimport { makeStyles, AppBar, Grid, Badge, withStyles } from '@material-ui/core';\r\nimport {GlobalContext} from \"../context/Provider\"\r\nimport CompletedList from '../components/CompletedList';\r\nimport IncompletedList from '../components/IncompleteList';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        background: theme.palette.type === 'dark' ? null : '#f3f3f3',\r\n        '& .MuiBottomNavigationAction-root': {\r\n            maxWidth: 'inherit',\r\n        },\r\n        '& .MuiBottomNavigationAction-root.Mui-selected': {\r\n            color: theme.palette.type === 'dark' ? '#90caf9' : null,\r\n            fontWeight: 600,\r\n            background: theme.palette.type === 'dark' ? '#00000070' : null,\r\n        }\r\n    },\r\n    appBar: {\r\n        top: \"auto\",\r\n        bottom: 0,\r\n    },\r\n}));\r\n\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        background: 'green',\r\n        color: 'white',\r\n    }\r\n}))(Badge);\r\n\r\nfunction MobileView(props) {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState('Incomplete');\r\n\r\n    const { inCompleteList, completedList} = useContext(GlobalContext);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <BottomNavigation value={value} showLabels onChange={handleChange} className={classes.root}>\r\n                    <BottomNavigationAction label=\"Incomplete\" value=\"Incomplete\" icon={<Badge color=\"error\" badgeContent={inCompleteList.length || 0}><RadioButtonUncheckedIcon /></Badge>} />\r\n                    <BottomNavigationAction label=\"Complete\" value=\"Complete\" icon={<StyledBadge badgeContent={completedList.length || 0}><CheckCircleOutlineIcon /></StyledBadge>} />\r\n                </BottomNavigation>\r\n            </AppBar>\r\n            <Grid container spacing={3} style={{ marginTop: 10, marginBottom: 60 }} >\r\n                <Grid item xs={12}>  \r\n                    {value === 'Incomplete' ? <IncompletedList {...props} /> : <CompletedList {...props} />}\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MobileView;\r\n","import React from 'react'\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    desktop: {\r\n        position: \"fixed\",\r\n        bottom: theme.spacing(2),\r\n        right: theme.spacing(2),\r\n    },\r\n    mob: {\r\n        position: \"fixed\",\r\n        top: 90,\r\n        left: '45%',\r\n    }\r\n}));\r\n\r\nfunction ScrollToTp(props) {\r\n    const { children, window, isMobile } = props;\r\n    const classes = useStyles();\r\n    // Note that you normally won't need to set the window ref as useScrollTrigger\r\n    // will default to window.\r\n    // This is only being set here because the demo is in an iframe.\r\n    const trigger = useScrollTrigger({\r\n        target: window ? window() : undefined,\r\n        disableHysteresis: true,\r\n        threshold: isMobile ? 300 : 500\r\n    });\r\n\r\n    const handleClick = (event) => {\r\n        const anchor = (event.target.ownerDocument || document).querySelector(\r\n            \"#back-to-top-anchor\"\r\n        );\r\n\r\n        if (anchor) {\r\n            anchor.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Zoom in={trigger}>\r\n            <div onClick={handleClick} role=\"presentation\" className={isMobile ? classes.mob : classes.desktop}>\r\n                {children}\r\n            </div>\r\n        </Zoom>\r\n    );\r\n}\r\n\r\nexport default ScrollToTp;\r\n","import React, { useContext } from 'react'\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { Snackbar } from '@material-ui/core';\r\nimport { GlobalContext } from '../context/Provider';\r\n\r\nfunction CustomSnackbar() {\r\n\r\n    const {showSnackbar, alertSeverity, alertMessage, closeSnackbar, isDarkModeOn } = useContext(GlobalContext);\r\n\r\n    const Alert = (props) => {\r\n        return <MuiAlert elevation={6} variant={isDarkModeOn ? \"standard\" : \"filled\"} {...props} />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar open={showSnackbar} autoHideDuration={4000} onClose={closeSnackbar} anchorOrigin={{vertical: 'top', horizontal: 'center',}} >\r\n                <Alert onClose={closeSnackbar} severity={alertSeverity || 'info'}>{alertMessage}</Alert>\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomSnackbar;\r\n","import React, { useContext } from 'react';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, DialogContentText } from '@material-ui/core';\r\nimport { GlobalContext } from '../context/Provider';\r\n\r\nconst CustomDialog = () => {\r\n    const {isDialogOpen, dialogTitle, dialogContent, hideDialog, todoSelected, deleteTodo} = useContext(GlobalContext)\r\n\r\n    const handleConfirm = () => {\r\n        deleteTodo(todoSelected);\r\n        hideDialog();\r\n    };\r\n\r\n    return (\r\n        <Dialog open={isDialogOpen}  onClose={() => hideDialog()} aria-labelledby=\"confirm-dialog\">\r\n            <DialogTitle>{dialogTitle}</DialogTitle>\r\n            <DialogContent dividers>\r\n                <DialogContentText>\r\n                    {dialogContent}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions >\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => handleConfirm()}>Yes</Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => hideDialog()}>No</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default CustomDialog;","import React, { useState, useEffect, useContext } from 'react';\r\nimport TodoForm from '../components/TodoForm';\r\nimport Header from '../components/Header';\r\nimport WebView from './WebView';\r\nimport MobileView from './MobileView';\r\nimport ScrollTop from '../components/ScrollToTp'\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\nimport CustomSnackbar from '../components/CustomSnackbar';\r\nimport CustomDialog from '../components/CustomDialog';\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport { GlobalContext } from '../context/Provider';\r\n\r\nfunction Mainview(props) {\r\n    const { isDarkModeOn } = useContext(GlobalContext);\r\n    const [darkState, setDarkState] = useState(isDarkModeOn);\r\n\r\n    const darkTheme = createMuiTheme({\r\n      palette: {\r\n        type: darkState ? \"dark\" : \"light\",\r\n      }\r\n    });\r\n\r\n    const handleThemeChange = () => {\r\n      setDarkState(!darkState);\r\n    };\r\n\r\n    useEffect(() => {\r\n      document.body.classList.toggle('darkMode', darkState);\r\n    }, [darkState]);\r\n\r\n    return (\r\n        <ThemeProvider theme={darkTheme}>\r\n            <div id=\"back-to-top-anchor\"></div>\r\n            <Header text=\"Task Tracker\" {...props} handleThemeChange={handleThemeChange} />\r\n            <br />\r\n            <TodoForm />\r\n            {props.isMobile ? <MobileView isMobile={props.isMobile}  /> : <WebView isMobile={props.isMobile} />}\r\n            <ScrollTop {...props}>\r\n                <Fab color=\"primary\" size=\"small\" aria-label=\"scroll back to top\">\r\n                    <KeyboardArrowUpIcon />\r\n                </Fab>\r\n            </ScrollTop>\r\n            <CustomSnackbar />\r\n            <CustomDialog />\r\n        </ThemeProvider >\r\n    )\r\n}\r\n\r\nexport default Mainview;\r\n","import React from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport Provider from './context/Provider';\r\nimport Mainview from './containers/index'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n\r\n  return (\r\n    <Provider>\r\n      <div>\r\n        <Container maxWidth={\"lg\"} >\r\n          <Mainview isMobile={isMobile} />\r\n        </Container>\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}