{"version":3,"sources":["context/AppReducer.js","context/Provider.js","components/TodoForm.js","components/HideOnScroll.js","components/Header.js","components/TodoActions.js","components/TodoItem.js","components/Nodata.js","components/CompletedList.js","components/IncompleteList.js","containers/WebView.js","containers/MobileView.js","components/ScrollToTp.js","components/CustomSnackbar.js","components/CustomDialog.js","containers/index.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","todos","payload","filter","todo","id","isSnackBarOpen","alertSeverity","alertType","alertMessage","message","isDialogOpen","todoSelected","dialogTitle","title","dialogContent","content","initialState","JSON","parse","window","localStorage","getItem","GlobalContext","createContext","Provider","children","useReducer","appReducer","dispatch","completedList","isComplete","inCompleteList","showSnackbar","openSnackbar","msg","useEffect","Todos","setItem","stringify","UpdateLS","value","addTodo","trimmedText","trim","newTask","Date","now","createdAt","taskText","isEdit","length","setTimeout","deleteTodo","onCheckHandler","currentTodos","selectedIndex","findIndex","editHandler","editDone","defaultValue","closeSnackbar","showDialog","hideDialog","TodoForm","useState","setvalue","useContext","Paper","elevation","style","marginTop","onSubmit","event","preventDefault","TextField","variant","placeholder","onChange","e","target","fullWidth","autoFocus","InputProps","endAdornment","IconButton","onClick","color","HideOnScroll","props","trigger","useScrollTrigger","undefined","Slide","appear","direction","in","myStyle","makeStyles","root","fontWeight","margin","Header","classes","AppBar","className","Typography","align","text","TodoActions","inputValue","React","anchorEl","setAnchorEl","handleClose","aria-label","Tooltip","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","size","styles","container","marginBottom","boxShadow","cursor","complete","textDecoration","incomplete","secondaryTxt","fontSize","primaryTxt","secondaryAction","right","secondaryActionMobile","TodoItem","isMobile","setInputValue","taskDate","toDateString","ListItem","onDoubleClick","changeHandler","multiline","ListItemText","primary","secondary","ListItemSecondaryAction","useStyles","main","display","placeItems","height","Nodata","primaryText","secondaryText","CompletedList","List","map","index","key","IncompletedList","WebView","Grid","spacing","item","md","xs","width","position","bottom","background","appBar","top","StyledBadge","withStyles","theme","badge","Badge","MobileView","setValue","BottomNavigation","showLabels","newValue","BottomNavigationAction","label","icon","badgeContent","desktop","mob","left","ScrollToTp","disableHysteresis","threshold","Zoom","anchor","ownerDocument","document","querySelector","scrollIntoView","behavior","block","role","CustomSnackbar","Snackbar","autoHideDuration","severity","CustomDialog","Dialog","aria-labelledby","DialogTitle","DialogContent","dividers","DialogContentText","DialogActions","Button","Mainview","Fab","App","test","navigator","userAgent","Container","maxWidth","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5271b88b.chunk.js","sourcesContent":["export default (state, action) => {\r\n    switch(action.type){\r\n        case \"ADD_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: [action.payload, ...state.todos],\r\n            }\r\n        case \"REMOVE_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: state.todos.filter(todo => todo.id !== action.payload)\r\n            }\r\n        case \"CHECK_HANDLER\":\r\n            return {\r\n                ...state,\r\n                todos: action.payload\r\n            }\r\n        case \"EDIT_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: action.payload\r\n            }\r\n        case \"TEXT_EDIT_TODO\":\r\n            return {\r\n                ...state,\r\n                todos: action.payload\r\n            }\r\n        case \"OPEN_SNACKBAR\":\r\n            return {\r\n                ...state,\r\n                isSnackBarOpen: true,\r\n                alertSeverity: action.payload.alertType,\r\n                alertMessage: action.payload.message,\r\n            }\r\n        case \"CLOSE_SNACKBAR\":\r\n            return {\r\n                ...state,\r\n                isSnackBarOpen: false,\r\n                alertSeverity: '',\r\n                alertMessage: '',\r\n            }\r\n        case \"SHOW_DIALOG\":\r\n            return {\r\n                ...state,\r\n                isDialogOpen: true,\r\n                todoSelected: action.payload.id,\r\n                dialogTitle: action.payload.title,\r\n                dialogContent: action.payload.content,\r\n            }\r\n        case \"HIDE_DIALOG\":\r\n            return {\r\n                ...state,\r\n                isDialogOpen: false,\r\n                todoSelected: null,\r\n                dialogTitle: '',    \r\n                dialogContent: '',\r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n","import React, {createContext, useReducer, useEffect} from 'react'\r\nimport appReducer from \"./AppReducer\"\r\nconst initialState = {\r\n    todos: JSON.parse(window.localStorage.getItem(\"todos\")) || [],\r\n    isSnackBarOpen: false,\r\n    alertSeverity: '',\r\n    alertMessage: '',\r\n    isDialogOpen: false,\r\n    dialogTitle: '',\r\n    dialogContent: '',\r\n    todoSelected: null,\r\n}\r\n\r\nexport const GlobalContext = createContext(initialState);  // Context is defined here\r\n\r\nfunction Provider({children}) {\r\n    const [state, dispatch] = useReducer(appReducer, initialState);\r\n    \r\n    // state bindings\r\n    const completedList = state.todos.filter(todo => todo.isComplete === true);\r\n    const inCompleteList = state.todos.filter(todo => todo.isComplete === false);\r\n    const showSnackbar = state.isSnackBarOpen;\r\n    const alertSeverity = state.alertSeverity;\r\n    const alertMessage = state.alertMessage;\r\n    const todoSelected = state.todoSelected;\r\n\r\n    // all actions \r\n    const addTodo = (value) => {\r\n        let trimmedText = value.trim();\r\n        let newTask = {\r\n            id: Date.now(),\r\n            createdAt: Date.now(),\r\n            taskText: trimmedText,\r\n            isComplete: false,\r\n            isEdit: false,\r\n        }\r\n        if(trimmedText.length > 0){\r\n            dispatch({\r\n                type: \"ADD_TODO\",\r\n                payload: newTask\r\n            });\r\n            openSnackbar('success', 'New Task Added');\r\n            if (state.todos && state.todos.length < 2) setTimeout(() => openSnackbar('info', 'Double tap/click on a task to mark it Complete or Incomplete'), 5000);\r\n        }\r\n    }\r\n\r\n    const deleteTodo = (value) => {\r\n        dispatch({\r\n            type: \"REMOVE_TODO\",\r\n            payload: value\r\n        });\r\n        openSnackbar('error', 'Task Deleted.')\r\n    }   \r\n\r\n    const onCheckHandler = (id) => {\r\n        let currentTodos = [...state.todos];\r\n        let selectedIndex = currentTodos.findIndex(todo => todo.id === id);\r\n        currentTodos[selectedIndex].isComplete = !currentTodos[selectedIndex].isComplete;\r\n        currentTodos[selectedIndex].isEdit = false;\r\n        dispatch({\r\n            type: \"CHECK_HANDLER\",\r\n            payload: currentTodos\r\n        })\r\n        currentTodos[selectedIndex].isComplete && openSnackbar('success', 'Task Completed.');\r\n    }\r\n\r\n    const editHandler = (id) => {\r\n        let currentTodos = [...state.todos];\r\n        let selectedIndex = currentTodos.findIndex(todo => todo.id === id);\r\n        currentTodos[selectedIndex].isEdit = !currentTodos[selectedIndex].isEdit;\r\n        dispatch({\r\n            type: \"EDIT_TODO\",\r\n            payload: currentTodos\r\n        })\r\n    }\r\n\r\n    const editDone = (id, value, defaultValue) => {\r\n        let currentTodos = [...state.todos];\r\n        let selectedIndex = currentTodos.findIndex(todo => todo.id == id);\r\n        currentTodos[selectedIndex].isEdit = !currentTodos[selectedIndex].isEdit;\r\n        if(value === ''){\r\n            currentTodos[selectedIndex].taskText = defaultValue;\r\n        } else {\r\n            currentTodos[selectedIndex].taskText = value;\r\n        }\r\n        dispatch({\r\n            type: \"TEXT_EDIT_TODO\",\r\n            payload: currentTodos\r\n        })\r\n        openSnackbar('success', 'Task Edited.');\r\n    }\r\n\r\n    const openSnackbar = (type, msg) => {\r\n        dispatch({\r\n            type: \"OPEN_SNACKBAR\",\r\n            payload: {alertType: type, message: msg}\r\n        })\r\n    }\r\n    const closeSnackbar = (type, msg) => {\r\n        dispatch({\r\n            type: \"CLOSE_SNACKBAR\",\r\n        });\r\n    }\r\n\r\n    const showDialog = (id, title, content) => {\r\n        dispatch({\r\n            type: \"SHOW_DIALOG\",\r\n            payload: {id, title, content},\r\n        })\r\n    }\r\n\r\n    const hideDialog = () => {\r\n        dispatch({\r\n            type: \"HIDE_DIALOG\",\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const UpdateLS = (todos) => {\r\n            let Todos = [...todos];\r\n            window.localStorage.setItem(\"todos\", JSON.stringify(Todos));\r\n        }\r\n        UpdateLS(state.todos);\r\n    }, [state])\r\n\r\n\r\n    return (\r\n        <GlobalContext.Provider \r\n            value={{\r\n                todos: state.todos,\r\n                completedList,\r\n                inCompleteList,\r\n                todoSelected,\r\n                addTodo,\r\n                deleteTodo,\r\n                onCheckHandler,\r\n                editHandler,\r\n                editDone,\r\n                showSnackbar,\r\n                alertSeverity,\r\n                alertMessage,\r\n                openSnackbar,\r\n                closeSnackbar,\r\n                showDialog,\r\n                hideDialog,\r\n                isDialogOpen: state.isDialogOpen,\r\n                dialogTitle: state.dialogTitle,\r\n                dialogContent: state.dialogContent,\r\n            }}>\r\n                {children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Provider;\r\n","import React, { useState, useContext } from 'react'\r\nimport { TextField, Paper, IconButton } from '@material-ui/core'\r\nimport {GlobalContext} from \"../context/Provider\"\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nfunction TodoForm() {\r\n    const [value, setvalue] = useState('');\r\n    const {addTodo}  = useContext(GlobalContext);\r\n\r\n    const ClearInput = () => (\r\n        <IconButton onClick={() => setvalue('')}>\r\n            <ClearIcon color=\"action\" />\r\n        </IconButton>\r\n    );\r\n\r\n    return (\r\n        <Paper elevation={10} style={{marginTop: \"98px\"}}>\r\n            <form\r\n                onSubmit={event => {\r\n                    event.preventDefault();\r\n                    addTodo(value);\r\n                    setvalue('')\r\n                }}\r\n            >\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    placeholder=\"type here to add and hit enter.....\"  \r\n                    value={value} \r\n                    onChange={(e)=> setvalue(e.target.value)} \r\n                    fullWidth \r\n                    autoFocus={true}\r\n                    InputProps={{\r\n                        endAdornment: <ClearInput />\r\n                    }}\r\n                />\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default TodoForm;\r\n","import React from 'react';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\r\n\r\nfunction HideOnScroll(props) {\r\n    const { children, window } = props;\r\n    const trigger = useScrollTrigger({ target: window ? window() : undefined });\r\n\r\n    return (\r\n      <Slide appear={false} direction=\"down\" in={!trigger}>\r\n        {children}\r\n      </Slide>\r\n    );\r\n}\r\n\r\nexport default HideOnScroll;\r\n","import React from 'react'\r\nimport {Typography, makeStyles, AppBar} from '@material-ui/core'\r\nimport HideOnScroll from './HideOnScroll';\r\n\r\nconst myStyle = makeStyles({\r\n    root: {\r\n        \r\n    },\r\n    title: {\r\n        fontWeight: \"bold\",\r\n        margin: \"15px 0px\",\r\n    }\r\n})\r\n\r\nfunction Header(props) {\r\n    const classes = myStyle();\r\n    return (\r\n        <HideOnScroll {...props}>\r\n            <AppBar className={classes.root} >\r\n                <Typography variant=\"h4\" align=\"center\" className={classes.title}  >\r\n                    {props.text}\r\n                </Typography>\r\n            </AppBar>\r\n        </HideOnScroll>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React, { useContext } from 'react';\r\nimport { IconButton, Menu, MenuItem, Tooltip } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditSharpIcon from '@material-ui/icons/EditSharp';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {GlobalContext} from \"../context/Provider\";\r\n\r\nconst TodoActions = ({todo, inputValue}) => {\r\n    const {deleteTodo, editHandler, editDone, showDialog} = useContext(GlobalContext); \r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* {\r\n                todo.isComplete ? \r\n                <>\r\n                    <IconButton aria-label='delete' onClick={() => deleteTodo(todo.id)} color=\"secondary\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </> \r\n                :\r\n                <>\r\n                    {\r\n                        todo.isEdit ? \r\n                        <IconButton aria-label='delete' onClick={() => editDone(todo.id, inputValue, todo.taskText)} color=\"primary\">\r\n                            <DoneIcon />\r\n                        </IconButton>\r\n                        :\r\n                        <>\r\n                            <IconButton aria-label='delete' onClick={() => editHandler(todo.id)} color=\"primary\">\r\n                                <EditSharpIcon />\r\n                            </IconButton>\r\n                            <IconButton aria-label='delete' onClick={() => deleteTodo(todo.id)} color=\"secondary\">\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </>\r\n                    }\r\n                   \r\n                </> \r\n            } */}\r\n            {\r\n                todo.isEdit ? \r\n                <IconButton aria-label='delete' onClick={() => editDone(todo.id, inputValue, todo.taskText)} color=\"primary\">\r\n                    <DoneIcon />\r\n                </IconButton> \r\n                :\r\n                <Tooltip title=\"options\">\r\n                    <IconButton\r\n                        aria-label=\"more\"\r\n                        aria-controls=\"long-menu\"\r\n                        aria-haspopup=\"true\"\r\n                        onClick={handleClick}\r\n                    >\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            }\r\n            <Menu\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                {\r\n                    todo.isComplete ? \r\n                    <MenuItem onClick={handleClose}>\r\n                        <IconButton aria-label='delete' onClick={() => showDialog(todo.id, 'Delete Task', 'Are you sure you want to delete this ?')} color=\"secondary\">\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                    </MenuItem>\r\n                    :\r\n                    <div>\r\n                        <MenuItem onClick={handleClose}>\r\n                            <IconButton aria-label='delete' onClick={() => editHandler(todo.id)} color=\"primary\" size=\"small\">\r\n                                <EditSharpIcon />\r\n                            </IconButton>\r\n                        </MenuItem>\r\n                        <MenuItem onClick={handleClose}>\r\n                            <IconButton aria-label='delete' onClick={() => showDialog(todo.id, 'Delete Task', 'Are you sure you want to delete this ?')} color=\"secondary\" size=\"small\">\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </MenuItem>\r\n                    </div>\r\n                }\r\n            </Menu>\r\n        </>\r\n    )\r\n} \r\n\r\nexport default TodoActions;\r\n\r\n\r\n\r\n","import React, {useContext, useState, useEffect} from 'react'\r\nimport { ListItem, Tooltip, ListItemText, ListItemSecondaryAction, Paper, makeStyles,TextField } from '@material-ui/core';\r\nimport {GlobalContext} from \"../context/Provider\";\r\nimport TodoActions from \"./TodoActions\";\r\n\r\nconst styles = makeStyles({\r\n    container: {\r\n        marginBottom: \"15px\",\r\n        \"&:hover\": {\r\n            boxShadow: \"0px 5px 5px -3px rgba(0,0,0,0.2), 0px 8px 10px 1px rgba(0,0,0,0.14), 0px 3px 14px 2px rgba(0,0,0,0.12)\",\r\n            cursor: \"pointer\"\r\n        }\r\n    },\r\n    complete: {\r\n        color: \"green\",\r\n        '& > span': {\r\n            textDecoration: \"line-through\",\r\n        }\r\n    },\r\n    incomplete: {\r\n        color: \"red\",\r\n        textDecoration: \"none\",\r\n    },\r\n    secondaryTxt: {\r\n        fontSize: 12,\r\n        marginTop: 8,\r\n    },\r\n    primaryTxt: {\r\n        fontSize: '1.2rem',\r\n    },\r\n    secondaryAction: {\r\n        right: 4,\r\n    },\r\n    secondaryActionMobile: {\r\n        right: 2,\r\n    }\r\n});\r\n\r\n\r\nfunction TodoItem({todo, isMobile}) {\r\n    const { onCheckHandler } = useContext(GlobalContext); \r\n    const classes = styles();\r\n\r\n    const [inputValue, setInputValue] = useState(todo.taskText);\r\n\r\n    const changeHandler = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const taskDate = todo.createdAt && new Date(todo.createdAt).toDateString();\r\n\r\n   \r\n    return (\r\n        <Paper className={classes.container} elevation={3}>\r\n            <ListItem  onDoubleClick={() => onCheckHandler(todo.id)}>\r\n                {\r\n                    todo.isEdit ? \r\n                    <TextField id=\"inputText\" color=\"primary\" value={inputValue} onChange={(e) => changeHandler(e)} fullWidth multiline />\r\n                    :\r\n                    <ListItemText \r\n                        multiline='true'\r\n                        primary={todo.taskText}\r\n                        secondary={taskDate || ''}\r\n                        className={todo.isComplete ? classes.complete : classes.incomplete}\r\n                        classes={{\r\n                            primary: classes.primaryTxt,\r\n                            secondary: classes.secondaryTxt\r\n                        }}\r\n                    />\r\n                }\r\n                <ListItemSecondaryAction classes={{ root: isMobile ? classes.secondaryActionMobile : classes.secondaryAction }}>\r\n                    <TodoActions todo={todo} inputValue={inputValue} />\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport { makeStyles, Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        display: 'grid',\r\n        placeItems: 'center',\r\n        height: '50vh',\r\n    },\r\n    text: {\r\n        color: '#777'\r\n    }\r\n})\r\n\r\nfunction Nodata({primaryText, secondaryText}) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <Typography variant=\"h5\" className={classes.text} align=\"center\">\r\n                {primaryText}\r\n                <br/>\r\n                {secondaryText}\r\n            </Typography>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nodata;\r\n","import React, {useContext} from 'react'\r\nimport { List,  Typography } from '@material-ui/core';\r\nimport TodoItem from './TodoItem';\r\nimport NoData from \"./Nodata\";\r\nimport { GlobalContext } from '../context/Provider';\r\n\r\n\r\n\r\nfunction CompletedList(props) {\r\n\r\n    const {completedList} = useContext(GlobalContext);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                completedList.length === 0 || typeof(completedList) === undefined ? \r\n                <>\r\n                    {props.isMobile ? <NoData primaryText=\"No Completed\" secondaryText=\"Task Available\" /> : null}\r\n                </> : \r\n                <>\r\n                    <Typography variant=\"h5\" align=\"center\" style={{color: 'green'}}>\r\n                        Completed {props.isMobile ? null : `(${completedList.length})`}\r\n                    </Typography>\r\n                    <List>\r\n                        {\r\n                            completedList.map((todo, index) => (\r\n                                <TodoItem key={todo.id} todo={todo} {...props}  />\r\n                            ))\r\n                        }\r\n                    </List>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CompletedList;\r\n","import React, {useContext} from 'react'\r\nimport { List,  Typography } from '@material-ui/core';\r\nimport TodoItem from './TodoItem';\r\nimport {GlobalContext} from \"../context/Provider\"\r\nimport Nodata from './Nodata';\r\n\r\nfunction IncompletedList(props) {\r\n    \r\n    const {inCompleteList} = useContext(GlobalContext);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                inCompleteList.length === 0 || typeof(inCompleteList) === undefined ? \r\n                <>\r\n                {props.isMobile ? <Nodata primaryText=\"No Incompleted\" secondaryText=\"Task Available\" /> : null}\r\n                </>\r\n                :\r\n                <>\r\n                    <Typography variant=\"h5\" align=\"center\" color=\"error\">\r\n                        Incomplete {props.isMobile ? null : `(${inCompleteList.length})`}\r\n                    </Typography>\r\n                    <List> \r\n                        {\r\n                            inCompleteList.map((todo) => (\r\n                                <TodoItem key={todo.id} todo={todo} {...props}   />\r\n                            ))\r\n                        }\r\n                    </List>\r\n                </>\r\n            }\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default IncompletedList;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport CompletedList from '../components/CompletedList';\r\nimport IncompletedList from '../components/IncompleteList';\r\n\r\nfunction WebView() {\r\n    return (\r\n        <Grid container spacing={3} style={{ marginTop: 30 }} >\r\n          <Grid item md={6} xs={12}>\r\n            <IncompletedList />  \r\n          </Grid>\r\n          <Grid item md={6} xs={12}>\r\n            <CompletedList />\r\n          </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default WebView;\r\n","import React, { useContext } from 'react';\r\nimport { makeStyles, AppBar, Grid, Badge, withStyles } from '@material-ui/core';\r\nimport {GlobalContext} from \"../context/Provider\"\r\nimport CompletedList from '../components/CompletedList';\r\nimport IncompletedList from '../components/IncompleteList';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        background: '#f3f3f3',\r\n    },\r\n    appBar: {\r\n        top: \"auto\",\r\n        bottom: 0,\r\n    },\r\n});\r\n\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        background: 'green',\r\n        color: 'white',\r\n    }\r\n}))(Badge);\r\n\r\nfunction MobileView(props) {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState('Incomplete');\r\n\r\n    const { inCompleteList, completedList} = useContext(GlobalContext);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <BottomNavigation value={value} showLabels onChange={handleChange} className={classes.root}>\r\n                    <BottomNavigationAction label=\"Incomplete\" value=\"Incomplete\" icon={<Badge color=\"error\" badgeContent={inCompleteList.length || 0}><RadioButtonUncheckedIcon /></Badge>} />\r\n                    <BottomNavigationAction label=\"Complete\" value=\"Complete\" icon={<StyledBadge badgeContent={completedList.length || 0}><CheckCircleOutlineIcon /></StyledBadge>} />\r\n                </BottomNavigation>\r\n            </AppBar>\r\n            <Grid container spacing={3} style={{ marginTop: 10, marginBottom: 40 }} >\r\n                <Grid item xs={12}>  \r\n                    {value === 'Incomplete' ? <IncompletedList {...props} /> : <CompletedList {...props} />}\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MobileView;\r\n","import React from 'react'\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    desktop: {\r\n        position: \"fixed\",\r\n        bottom: theme.spacing(2),\r\n        right: theme.spacing(2),\r\n    },\r\n    mob: {\r\n        position: \"fixed\",\r\n        top: 90,\r\n        left: '45%',\r\n    }\r\n}));\r\n\r\nfunction ScrollToTp(props) {\r\n    const { children, window, isMobile } = props;\r\n    const classes = useStyles();\r\n    // Note that you normally won't need to set the window ref as useScrollTrigger\r\n    // will default to window.\r\n    // This is only being set here because the demo is in an iframe.\r\n    const trigger = useScrollTrigger({\r\n        target: window ? window() : undefined,\r\n        disableHysteresis: true,\r\n        threshold: isMobile ? 300 : 500\r\n    });\r\n\r\n    const handleClick = (event) => {\r\n        const anchor = (event.target.ownerDocument || document).querySelector(\r\n            \"#back-to-top-anchor\"\r\n        );\r\n\r\n        if (anchor) {\r\n            anchor.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Zoom in={trigger}>\r\n            <div onClick={handleClick} role=\"presentation\" className={isMobile ? classes.mob : classes.desktop}>\r\n                {children}\r\n            </div>\r\n        </Zoom>\r\n    );\r\n}\r\n\r\nexport default ScrollToTp;\r\n","import React, { useContext } from 'react'\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { Snackbar } from '@material-ui/core';\r\nimport { GlobalContext } from '../context/Provider';\r\n\r\nfunction CustomSnackbar() {\r\n\r\n    const {showSnackbar, alertSeverity, alertMessage, closeSnackbar } = useContext(GlobalContext);\r\n\r\n    const Alert = (props) => {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar open={showSnackbar} autoHideDuration={4000} onClose={closeSnackbar} >\r\n                <Alert onClose={closeSnackbar} severity={alertSeverity || 'info'}>{alertMessage}</Alert>\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomSnackbar;\r\n","import React, { useContext } from 'react';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, DialogContentText, withStyles } from '@material-ui/core';\r\nimport { GlobalContext } from '../context/Provider';\r\n\r\nconst CustomDialog = () => {\r\n    const {isDialogOpen, dialogTitle, dialogContent, hideDialog, todoSelected, deleteTodo} = useContext(GlobalContext)\r\n\r\n    const handleConfirm = () => {\r\n        deleteTodo(todoSelected);\r\n        hideDialog();\r\n    };\r\n\r\n    return (\r\n        <Dialog open={isDialogOpen}  onClose={() => hideDialog()} aria-labelledby=\"confirm-dialog\">\r\n            <DialogTitle>{dialogTitle}</DialogTitle>\r\n            <DialogContent dividers>\r\n                <DialogContentText>\r\n                    {dialogContent}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions >\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => handleConfirm()}>Yes</Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => hideDialog()}>No</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default CustomDialog;","import React from 'react';\r\nimport TodoForm from '../components/TodoForm';\r\nimport Header from '../components/Header';\r\nimport WebView from './WebView';\r\nimport MobileView from './MobileView';\r\nimport ScrollTop from '../components/ScrollToTp'\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\nimport CustomSnackbar from '../components/CustomSnackbar';\r\nimport CustomDialog from '../components/CustomDialog';\r\n\r\n\r\nfunction Mainview(props) {\r\n    return (\r\n        <>\r\n            <div id=\"back-to-top-anchor\"></div>\r\n            <Header text=\"Task Tracker\" {...props} />\r\n            <TodoForm />\r\n            {props.isMobile ? <MobileView isMobile={props.isMobile} /> : <WebView />}\r\n            <ScrollTop {...props}>\r\n                <Fab color=\"primary\" size=\"small\" aria-label=\"scroll back to top\">\r\n                    <KeyboardArrowUpIcon />\r\n                </Fab>\r\n            </ScrollTop>\r\n            <CustomSnackbar />\r\n            <CustomDialog />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Mainview;\r\n","import React from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport Provider from './context/Provider';\r\nimport Mainview from './containers/index'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n  \r\n  return (\r\n    <Provider>\r\n      <Container maxWidth={\"lg\"} >\r\n        <Mainview isMobile={isMobile} />\r\n      </Container>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}